name: CI

on:
  push:
    branches:
      - develop
      - master
      - release/*
      - trunk/*

  pull_request:
    branches:
      - develop
      - master
      - release/*
      - trunk/*

jobs:
  linux-native:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date --utc +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: linux-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            linux-ccache-
      - name: get version for veriblock-pop-cpp
        run: echo "VERIBLOCK_POP_CPP_VERSION=$(awk -F '=' '/\$\(package\)_version/{print $NF}' $PWD/depends/packages/veriblock-pop-cpp.mk | head -n1)" >> $GITHUB_ENV
      - name: veriblock-pop-cpp release version
        run: echo Using veriblock-pop-cpp version $VERIBLOCK_POP_CPP_VERSION
      - name: install apt-get deps
        run: |
          sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils ccache python3 python3-pip python3-setuptools python-setuptools
          sudo apt-get install libssl-dev libevent-dev python3-zmq python3-dev libboost-python-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libminiupnpc-dev libzmq3-dev libcurl4-openssl-dev libdb-dev libdb++-dev
      - name: install veriblock-pop-cpp
        env:
          BUILD_TYPE: Release
        run: |
          (
          pip3 install wheel
          sudo su;
          cd /opt;
          wget https://github.com/VeriBlock/alt-integration-cpp/archive/${VERIBLOCK_POP_CPP_VERSION}.tar.gz;
          tar -xf ${VERIBLOCK_POP_CPP_VERSION}.tar.gz;
          cd alt-integration-cpp-${VERIBLOCK_POP_CPP_VERSION};
          python3 setup.py install
          python3 setup.py test
          rm -rf build
          mkdir build;
          cd build;
          cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DTESTING=OFF -DWITH_PYPOPTOOLS=ON;
          make -j2;
          sudo make install
          )
      - name: autogen
        run: ./autogen.sh
      - name: configure
        run: ./configure
          --without-gui
          --with-incompatible-bdb
          --disable-bench
      - name: make
        run: make -j2
      - name: make check
        timeout-minutes: 60
        run: make check
      - name: run functional tests
        if: always()
        timeout-minutes: 60
        run: python3 test/functional/test_runner.py

  x86_64-w64-mingw32:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date --utc +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: depends cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.depends_cache
          key: mingw32-depends-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            mingw32-depends-
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: mingw32-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            mingw32-ccache-
      - name: run apt update
        run: sudo apt-get update
      - name: install build requirements
        run: sudo apt-get install python3 python3-pip python3-setuptools build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git g++-mingw-w64-x86-64 ccache nsis python-setuptools
      - name: set the default mingw32 g++ compiler option to posix
        run: sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      - name: strip out problematic Windows %PATH% imported var
        run: PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g')
      - name: set variables and build dependencies for x86_64-w64
        env:
          BUILD_TYPE: Release
          HOST: x86_64-w64-mingw32
          BASE_CACHE: ~/.depends_cache
        run: cd depends && make -j2
      - name: prepare QT build
        run: |
          cp ./src/qt/opengl32.dll depends/x86_64-w64-mingw32/lib/
          cp ./depends/x86_64-w64-mingw32/plugins/printsupport/libwindowsprintersupport.a depends/x86_64-w64-mingw32/lib/
          cp ./depends/x86_64-w64-mingw32/qml/QtGraphicalEffects/libqtgraphicaleffectsplugin.a depends/x86_64-w64-mingw32/lib/
          cp ./depends/x86_64-w64-mingw32/qml/QtGraphicalEffects/private/libqtgraphicaleffectsprivate.a depends/x86_64-w64-mingw32/lib/
          cp ./depends/x86_64-w64-mingw32/qml/QtQuick/Controls.2/libqtquickcontrols2plugin.a depends/x86_64-w64-mingw32/lib/
          cp ./depends/x86_64-w64-mingw32/qml/QtQuick/Controls.2/Material/libqtquickcontrols2materialstyleplugin.a depends/x86_64-w64-mingw32/lib/
          cp ./depends/x86_64-w64-mingw32/qml/QtQuick/Layouts/libqquicklayoutsplugin.a depends/x86_64-w64-mingw32/lib/
          cp ./depends/x86_64-w64-mingw32/qml/QtQuick/Templates.2/libqtquicktemplates2plugin.a depends/x86_64-w64-mingw32/lib/
          cp ./depends/x86_64-w64-mingw32/qml/QtQuick/Window.2/libwindowplugin.a depends/x86_64-w64-mingw32/lib/
          cp ./depends/x86_64-w64-mingw32/qml/QtQuick.2/libqtquick2plugin.a depends/x86_64-w64-mingw32/lib/
      - name: autogen
        run: ./autogen.sh
      - name: configure
        run: CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/
          --disable-bench
      - name: make
        run: make -j2
      - name: make deploy
        if: success()
        run: make deploy
      - name: create artifacts
        if: success()
        run: |
          mv ./bitcash-0.17.29-win64-setup.exe release/
          mv ./release bitcash-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
          zip -r9 bitcash-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-win64-qt.zip bitcash-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
      - name: upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: bitcash-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-win64-qt.zip
          path: bitcash-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-win64-qt.zip
